;; Object sigles/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "sigles/"
  :tables (list 
   (semanticdb-table "wizard-fun.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("wizard-insert-current-time" function (:user-visible-flag t) nil [161 293]) ("wizard-indent-remember" function (:user-visible-flag t) nil [295 506]) ("wizard-ror-shells" function (:user-visible-flag t) nil [508 738]) ("wizard-back-upcase" function nil nil [740 855]) ("wizard-kill-backward-word-or-region" function (:user-visible-flag t :arguments ("arg")) nil [856 1107]) ("wizard-new-brace-binding" function nil nil [1108 1208]) ("define-key" code nil nil [1209 1267]) ("define-key" code nil nil [1268 1327]))
    :file "wizard-fun.el"
    :pointmax 1358
    :unmatched-syntax 'nil
    )
   (semanticdb-table "defshell.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("defshell" package nil nil [1932 1951]) ("custom" include nil nil [1953 1970]) ("comint" include nil nil [1995 2012]) ("shell" include nil nil [2035 2051]) ("defgroup" code nil nil [2063 2130]) ("defshell-reuse-buffer" variable (:user-visible-flag t :default-value t) nil [2132 2275]) ("defshell-rename-buffer-uniquely" variable (:user-visible-flag t) nil [2277 2421]) ("defshell-shell" function (:user-visible-flag t :arguments ("defshell-file-name")) nil [2423 3053]) ("defshell" function (:arguments ("shell-file-name" "&optional" "shell-name")) nil [3055 3385]) ("defshell" code nil nil [3387 3416]) ("defshell" code nil nil [3417 3442]) ("defshell" code nil nil [3443 3471]) ("defshell" code nil nil [3472 3519]))
    :file "defshell.el"
    :pointmax 3547
    )
   (semanticdb-table "javascript.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cc-mode" include nil nil [1906 1924]) ("font-lock" include nil nil [1925 1945]) ("newcomment" include nil nil [1946 1967]) ("defgroup" code nil nil [1969 2086]) ("javascript-indent-level" variable (:default-value 4) nil [2088 2211]) ("javascript-auto-indent-flag" variable (:default-value t) nil [2213 2428]) ("javascript-mode-map" variable nil nil [2450 2519]) ("unless" code nil nil [2521 2600]) ("when" code nil nil [2602 2763]) ("javascript-insert-and-indent" function (:user-visible-flag t :arguments ("key")) nil [2765 3075]) ("javascript-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table))) (c-populate-syntax-table table) (modify-syntax-entry 95 "w" table) table)) nil [3115 3565]) ("js-re-search-forward-inner" function (:arguments ("regexp" "&optional" "bound" "count")) nil [3568 4335]) ("js-re-search-forward" function (:arguments ("regexp" "&optional" "bound" "noerror" "count")) nil [4338 5066]) ("js-re-search-backward-inner" function (:arguments ("regexp" "&optional" "bound" "count")) nil [5069 5960]) ("js-re-search-backward" function (:arguments ("regexp" "&optional" "bound" "noerror" "count")) nil [5963 6695]) ("js-continued-var-decl-list-p" function (:user-visible-flag t) nil [6698 7075]) ("js-inside-param-list-p" function nil nil [7100 7418]) ("js-function-heading-1-re" variable (:constant-flag t :default-value "^[ 	]*function[ 	]+\\(\\w+\\)") nil [7421 7557]) ("js-function-heading-2-re" variable (:constant-flag t :default-value "^[ 	]*\\(\\w+\\)[ 	]*:[ 	]*function\\>") nil [7559 7730]) ("js-keyword-re" variable (:constant-flag t :default-value (regexp-opt (quote ("abstract" "break" "case" "catch" "class" "const" "continue" "debugger" "default" "delete" "do" "else" "enum" "export" "extends" "final" "finally" "for" "function" "goto" "if" "implements" "import" "in" "instanceof" "interface" "native" "new" "package" "private" "protected" "public" "return" "static" "super" "switch" "synchronized" "this" "throw" "throws" "transient" "try" "typeof" "var" "void" "volatile" "while" "with")) (quote words))) nil [7732 8396]) ("js-basic-type-re" variable (:constant-flag t :default-value (regexp-opt (quote ("boolean" "byte" "char" "double" "float" "int" "long" "short" "void")) (quote words))) nil [8398 8602]) ("js-constant-re" variable (:constant-flag t :default-value (regexp-opt (quote ("false" "null" "true")) (quote words))) nil [8604 8749]) ("js-font-lock-keywords-1" variable (:constant-flag t :default-value (list "\\<import\\>" (list js-function-heading-1-re 1 font-lock-function-name-face) (list js-function-heading-2-re 1 font-lock-function-name-face) (list "[=(][ 	]*\\(/.*?[^\\]/\\w*\\)" 1 font-lock-string-face))) nil [8752 9039]) ("js-font-lock-keywords-2" variable (:constant-flag t :default-value (append js-font-lock-keywords-1 (list (list js-keyword-re 1 font-lock-keyword-face) (cons js-basic-type-re font-lock-type-face) (cons js-constant-re font-lock-constant-face)))) nil [9041 9320]) ("js-font-lock-keywords-3" variable (:constant-flag t :default-value (append js-font-lock-keywords-2 (list (list (concat "\\<\\(const\\|var\\)\\>\\|" js-basic-type-re) (list "\\(\\w+\\)[ 	]*\\([=;].*\\|,\\|/[/*]\\|$\\)" nil nil (quote (1 font-lock-variable-name-face)))) (list (concat "^[ 	]*\\w+[ 	]*\\([,;=]\\|/[/*]\\|$\\)") (list "\\(\\w+\\)[ 	]*\\([=;].*\\|,\\|/[/*]\\|$\\)" (quote (if (save-excursion (backward-char) (js-continued-var-decl-list-p)) (backward-word 1) (end-of-line))) (quote (end-of-line)) (quote (1 font-lock-variable-name-face)))) (list (concat "\\<function\\>\\([ 	]+\\w+\\)?[ 	]*([ 	]*\\w") (list "\\(\\w+\\)\\([ 	]*).*\\)?" (quote (backward-char)) (quote (end-of-line)) (quote (1 font-lock-variable-name-face)))) (list (concat "^[ 	]*\\w+[ 	]*[,)]") (list "\\w+" (quote (if (save-excursion (backward-char) (js-inside-param-list-p)) (backward-word 1) (end-of-line))) (quote (end-of-line)) (quote (0 font-lock-variable-name-face))))))) nil [9570 10738]) ("js-font-lock-keywords" variable (:constant-flag t :default-value (quote (js-font-lock-keywords-3 js-font-lock-keywords-1 js-font-lock-keywords-2 js-font-lock-keywords-3))) nil [10740 10931]) ("js-possibly-braceless-keyword-re" variable (:constant-flag t :default-value (regexp-opt (quote ("catch" "do" "else" "finally" "for" "if" "try" "while" "with")) (quote words))) nil [10958 11187]) ("js-indent-operator-re" variable (:constant-flag t :default-value (concat "[-+*/%<>=&^|?:]\\([^-+*/]\\|$\\)\\|" (regexp-opt (quote ("in" "instanceof")) (quote words)))) nil [11189 11415]) ("js-looking-at-operator-p" function nil nil [11418 11771]) ("js-continued-expression-p" function nil nil [11774 12322]) ("js-end-of-do-while-loop-p" function (:user-visible-flag t) nil [12325 13287]) ("js-ctrl-statement-indentation" function nil nil [13290 14095]) ("js-proper-indentation" function (:arguments ("parse-status")) nil [14098 15448]) ("javascript-indent-line" function (:user-visible-flag t) nil [15451 15861]) ("js-backward-paragraph" function nil nil [16168 16468]) ("js-forward-paragraph" function nil nil [16471 16756]) ("js-fill-block-comment-paragraph" function (:arguments ("parse-status" "justify")) nil [16760 18438]) ("js-sline-comment-par-start" function nil nil [18441 18786]) ("js-sline-comment-par-end" function nil nil [18789 19094]) ("js-sline-comment-offset" function (:arguments ("line")) nil [19097 19358]) ("js-sline-comment-text-offset" function (:arguments ("line")) nil [19361 19608]) ("js-at-empty-sline-comment-p" function nil nil [19611 19887]) ("js-fill-sline-comments" function (:arguments ("parse-status" "justify")) nil [19899 21314]) ("js-trailing-comment-p" function (:arguments ("parse-status")) nil [21319 21644]) ("js-block-comment-p" function (:arguments ("parse-status")) nil [21647 21967]) ("javascript-fill-paragraph" function (:user-visible-flag t :arguments ("&optional" "justify")) nil [21970 22462]) ("js-imenu-generic-expression" variable (:constant-flag t :default-value (list (list nil "function\\s-+\\(\\w+\\)\\s-*(" 1))) nil [22483 22661]) ("javascript-mode" function (:user-visible-flag t) nil [22705 23576]) ("javascript-mode" package nil nil [23579 23605]))
    :file "javascript.el"
    :pointmax 23634
    )
   (semanticdb-table "flex-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("derived" include nil nil [120 138]) ("define-derived-mode" code nil nil [160 908]) ("defalias" code nil nil [910 959]) ("flex-mode" package nil nil [961 981]))
    :file "flex-mode.el"
    :pointmax 981
    )
   (semanticdb-table "others.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("global-set-key" code nil nil [25 58]) ("match-paren" function (:user-visible-flag t :arguments ("arg")) nil [59 346]))
    :file "others.el"
    :pointmax 347
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
